[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "sargasso-api"
package-mode = false
version = "0.1.0"
description = ""
authors = ["Luis Soares <luisedu.soares@dynaccurate.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
sqlalchemy = { extras = ["asyncio"], version = "^2.0.32" }
fastapi = "^0.112.0"
pydantic = { extras = ["email"], version = "^2.11.1" }
pydantic-settings = "^2.4.0"
uvicorn = "^0.30.5"
azure-identity = "^1.17.1"
azure-confidentialledger = "^1.1.1"
psycopg2-binary = "^2.9.9"
asyncpg = "^0.29.0"
alembic = "^1.13.2"
python-multipart = "^0.0.9"
azure-storage-blob = "^12.22.0"
alembic-postgresql-enum = "^1.3.0"
snowflake-id = "^1.0.2"
pandas = "^2.2.3"
openpyxl = "^3.1.5"
lxml = "^5.3.2"
chardet = "^5.2.0"
bcrypt = "^4.3.0"

[tool.poetry.group.dev.dependencies]
aiosqlite = "^0.20.0"
autopep8 = "^2.3.1"
taskipy = "^1.13.0"
pytest = "^8.3.5"
pytest-asyncio = "^0.26.0"
pytest-cov = "^6.1.1"
ruff = "^0.11.5"
time-machine = "^2.16.0"
pytest-env = "^1.1.5"
pytest-freezegun = "^0.4.2"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov=src --cov-report=html --cov-report=xml"

[tool.pytest_env]
ENVIRONMENT = "TEST"

# https://coverage.readthedocs.io/en/latest/excluding.html
[tool.coverage.report]
omit = [
    # Project Configuration
    'src\main.py',
    'src\config\*',
    'src\utils\exc.py',
    'src\application\dto\*',
    'src\infrastructure\db\base.py',
    'src\infrastructure\db\engine.py',
    # Integration tests skiped
    'src\presentation\view.py',
    'src\presentation\routes\*',
    'src\presentation\routes\health.py',
    # Fake blockchain with json and pandas parsers
    'src\infrastructure\services\confidential_ledger\ifake_json_ledger.py', # fake ledger used only in dev environment
    'src\infrastructure\services\confidential_ledger\__init__.py',          # factory method for the fake ledger,
    'src\infrastructure\services\pandas_parser\drug\impl\__init__.py',      # factory method for drug parser,
]
exclude_also = [
    'def __repr__',
    'if self.debug:',
    'if settings.DEBUG',
    'raise AssertionError',
    'raise NotImplementedError',
    'if 0:',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
    'class .*\bProtocol\):',
    '@(abc\.)?abstractmethod',
    'log\.error\(',
    'log\.info\(',
    'log\.debug\(',
    '\sclose_session()',
    '\bjson\.(loads|dumps)\s*\((.*?)\)',
    'await session.close()',
    'await self.session.close()',
    'except Exception:\s*\n\s*pass',
    'except Exception:\s*\n\s*...',
]

[tool.ruff]
target-version = "py311"
# line-length = 79

# [tool.ruff.lint]
# preview = true
# select = ['I', 'F', 'E', 'W', 'PT']

# [tool.ruff.format]
# preview = true
# quote-style = "single"

[tool.taskipy.tasks]
autorevision = "alembic revision --autogenerate -m 'autogenerated'"
auhead = "alembic upgrade head"
adbase = "alembic downgrade base"
ruff = "ruff check ./src --fix"
ruff-check = "ruff check ./src"
ruff-format = "ruff format ./src"
pytest = 'pytest .'
pytest-cov = 'start "" "%cd%\htmlcov\index.html"'
run = "uvicorn src.main:app --port 8000 --reload --log-level debug"
run-trace = "uvicorn src.main:app --port 8000 --reload --log-level trace"
